// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     example.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AvroPayload struct {
	Field1 string `json:"field1"`

	Field2 int32 `json:"field2"`
}

const AvroPayloadAvroCRC64Fingerprint = ".d\xee&}J\v "

func NewAvroPayload() AvroPayload {
	r := AvroPayload{}
	return r
}

func DeserializeAvroPayload(r io.Reader) (AvroPayload, error) {
	t := NewAvroPayload()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAvroPayloadFromSchema(r io.Reader, schema string) (AvroPayload, error) {
	t := NewAvroPayload()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAvroPayload(r AvroPayload, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Field1, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Field2, w)
	if err != nil {
		return err
	}
	return err
}

func (r AvroPayload) Serialize(w io.Writer) error {
	return writeAvroPayload(r, w)
}

func (r AvroPayload) Schema() string {
	return "{\"fields\":[{\"name\":\"field1\",\"type\":\"string\"},{\"name\":\"field2\",\"type\":\"int\"}],\"name\":\"playground.AvroPayload\",\"type\":\"record\"}"
}

func (r AvroPayload) SchemaName() string {
	return "playground.AvroPayload"
}

func (_ AvroPayload) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AvroPayload) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AvroPayload) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AvroPayload) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AvroPayload) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AvroPayload) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AvroPayload) SetString(v string)   { panic("Unsupported operation") }
func (_ AvroPayload) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AvroPayload) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Field1}

		return w

	case 1:
		w := types.Int{Target: &r.Field2}

		return w

	}
	panic("Unknown field index")
}

func (r *AvroPayload) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *AvroPayload) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ AvroPayload) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AvroPayload) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AvroPayload) HintSize(int)                     { panic("Unsupported operation") }
func (_ AvroPayload) Finalize()                        {}

func (_ AvroPayload) AvroCRC64Fingerprint() []byte {
	return []byte(AvroPayloadAvroCRC64Fingerprint)
}

func (r AvroPayload) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["field1"], err = json.Marshal(r.Field1)
	if err != nil {
		return nil, err
	}
	output["field2"], err = json.Marshal(r.Field2)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AvroPayload) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["field1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Field1); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for field1")
	}
	val = func() json.RawMessage {
		if v, ok := fields["field2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Field2); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for field2")
	}
	return nil
}
